require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');

const token = process.env.TOKEN;
process.env["NTBA_FIX_350"] = 1;

const bot = new TelegramBot(token, { polling: true });
const { menu, reg, partners, ourcars, searchcar, profile, changeProfile } = require('./keyboards');
const sequelize = require('./db');
const Users = require("./models");

const express = require('express');
const fileUpload = require('express-fileupload');
const cors = require('cors');
const { access, unlink, readdir } = require('fs');
const { v4: uuidv4 } = require('uuid');
const mv = require('mv');
const path = require("path");
const sharp = require("sharp");
const { json } = require('body-parser');
const e = require('express');

const app = express();

app.use(express.json());

app.use("/api/image", express.static("img/users_cars"));
app.use("/api/icons", express.static("img/icons"));

app.use(cors());

app.use(fileUpload({}));

const port = process.env.PORT;

app.listen(port, () =>
	console.log(`App is listening on port ${port}.`)
);

app.get('/api', async (req, res) => {
	return res.json('work');
})

app.post('/api/searchcar', async (req, res) => {
	try {
		const searchName = req.body.searcheble;
		if (searchName != '') {
			let searchCarNum = await Users.findOne({ where: { carGRZ: searchName } });
			return res.json(searchCarNum);
		} else {
			return res.json('–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
		}
	} catch (e) {
		res.status(500).send(e);
	}
})

function shuffleArray(array) {
	for (let i = array.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1));
		[array[i], array[j]] = [array[j], array[i]];
	}
}

function deleteDoubleImg() {
	try {
		let photosQuery = Users.findAll({
			attributes: ['carImage'],
			raw: true
		}).then(function (results) {
			let photosInDB = results.map((i) => i.carImage)

			readdir(path.resolve(__dirname, "..", "bot-back/img/users_cars"), (err, files) => {

				let photosInDIR = [];

				files.forEach(photoName => {
					photosInDIR.push(photoName);
				});

				if (photosInDB.length != photosInDIR.length) {
					let diffPhotos = photosInDIR.filter(i => !photosInDB.includes(i));

					diffPhotos.forEach((dPhoto) => {
						unlink(path.resolve(__dirname, "..", "bot-back/img/users_cars", dPhoto), (err) => {
							if (err) throw err;
							console.log('dPhoto was deleted');
						});
					})
				}
			})
		});
	} catch (error) {
		console.log(error);
	}
}

app.get('/api/ourcars', async (req, res) => {
	try {
		readdir(path.resolve(__dirname, "..", "bot-back/img/users_cars"), (err, files) => {
			let allCarsPhotosName = [];

			files.forEach(fileName => {
				allCarsPhotosName.push(fileName);
			});

			//shuffleArray(allCarsPhotosName);

			const pageCount = Math.ceil(files.length / 12);
			let page = parseInt(req.query.page);

			if (!page) {
				page = 1;
			}

			if (page > pageCount) {
				page = pageCount
			}

			res.json({
				"page": page,
				"countPhotos": allCarsPhotosName.length,
				"pageCount": pageCount,
				"files": allCarsPhotosName.slice(page * 12 - 12, page * 12)
			});

		});
	} catch (error) {
		console.log(error);
	}
})

app.post('/api/upload', async (req, res) => {
	try {
		if (req.files.avatar) {
			let { avatar } = req.files;
			let type = avatar.name.split('.').pop();
			let fileName = uuidv4(avatar.name) + '.' + type;
			await avatar.mv(path.resolve(__dirname, "..", "bot-back/img/users_cars", fileName));
			return res.json(fileName);
		}
	} catch (err) {
		res.status(500).send(err);
	}
})

async function resizeImage() {
	try {
		readdir(path.resolve(__dirname, "..", "bot-back/img/users_cars"), (err, files) => {
			files.forEach(smallCard => {
				sharp(path.resolve(__dirname, "..", "bot-back/img/users_cars", smallCard))
					.resize(200)
					.toFormat("jpeg", { mozjpeg: true })
					.toFile(smallCard + "_" + "small.jpeg");
			});
		})
	} catch (error) {
		console.log(error);
	}
}

app.post("/api/upload/remove", async (req, res) => {
	try {
		let { response } = req.body;
		if (response !== " ") {
			access(path.resolve(__dirname, "..", "bot-back/img/users_cars", response), (err) => {
				if (err) {
					return res.json("err");
				}
				unlink(path.resolve(__dirname, "..", "bot-back/img/users_cars", response), (err) => {
					if (err) return console.log(err);
					// console.log("file deleted successfully");
				});
			});
		}
	} catch (error) {
		console.log(error);
	}
})

function updateProfile(chatId, curImage) {
	let curChatId = chatId;

	app.post('/api/change', async (req, res) => {
		try {

			let changedData = req.body.changedData;

			await Users.update(
				{
					carModel: changedData.car.toLowerCase().trimEnd(),
					carYear: changedData.carYear.trimEnd(),
					carGRZ: changedData.carNum.trimEnd(),
					carNote: changedData.carNote.toLowerCase().trimEnd(),
					carImage: changedData.carImage,
				},
				{
					where: { chatId: curChatId },
				}
			);

			curChatId = '';

			try {
				if (curImage) {
					unlink(path.resolve(__dirname, "..", "bot-back/img/users_cars", curImage), (err) => {
						if (err) throw err;
						console.log('file was deleted');
					});
				}
			} catch (error) {
				console.log(error);
			}
		} catch (err) {
			console.log(err);
		}
	})
}


const start = async () => {

	try {
		await sequelize.authenticate()
		await sequelize.sync()
		console.log('Connection has been established successfully.');
	} catch (e) {
		console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å', e);
	}

	bot.setMyCommands([
		{ command: '/info', description: '–û –∫–ª—É–±–µ' }
	])

	bot.on('message', async (msg) => {
		const text = msg.text;
		const chatId = msg.chat.id;

		try {
			if (text === '/start') {
				let userChatId = await Users.findOne({ where: { chatId: chatId } });
				if (userChatId) {
					return (
						bot.sendMessage(
							chatId,
							`–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? `,
							menu
						)
					)
				} else {
					return bot.sendMessage(
						chatId,
						`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ VAG –∫–ª—É–±–∞ –ß–µ–±–æ–∫—Å–∞—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é`,
						reg
					)
				}
			} else if (text === "/info") {
				// resizeImage();
				return (
					bot.sendMessage(
						chatId,
						`–ü—Ä–∏–≤–µ—Ç –ø—Ä–∏–≤–µ–µ–µ—Ç!\n–ù–∞ —Å–≤—è–∑–∏ VW/SK CLUB 21 - –∫—Ä—É–ø–Ω–µ–π—à–µ–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–∞–≥–æ–≤–æ–¥–æ–≤ –ß—É–≤–∞—à–∏–∏‚òùüèª\n\n–ú—ã - –æ–¥–Ω–∞ –±–æ–ª—å—à–∞—è —Å–µ–º—å—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ—Ä–∂–∏—Ç—Å—è –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–∞, –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º–∏ —Ä–∞–¥–æ—Å—Ç—è–º–∏ –∏ –Ω–µ—É–¥–∞—á–∞–º–∏, –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç —ç—Ç–æ, –ø–æ–º–æ–≥–∞—é—Ç –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç!\n–í—Å–µ –ª—é–±—è—Ç –ø–æ–∫—Ä–∞—Å–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ª–∞—Å—Ç–æ—á–∫–∞–º–∏ –∏ –º—ã –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µüí•\n–í–≤–∏–¥—É —ç—Ç–æ–≥–æ —É –Ω–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–≤—Å—Ç—Ä–µ—á–∏, –≥–¥–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤—Å—è –Ω–∞—à–∞ –¥—Ä—É–∂–Ω–∞—è —Å–µ–º—å—è –∏ –æ–±—Å—É–∂–¥–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥—É.\n–ê –∑–∞—Ç–µ–º —Ñ–ª–∞–≥–∏ –≤ —Ä—É–∫–∏ –∏ –≤ –∫–æ–Ω–≤–æ–π.\n–ú—ã –ø—Ä–æ–µ–∑–∂–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —É–ª–∏—Ü–∞–º –ß–µ–±–æ–∫—Å–∞—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥—Ä—É–∂–Ω–æ—Å—Ç—å.\n–ù–µ –∑–∞–±—É–¥–µ–º —Å–∫–∞–∑–∞—Ç—å –∏ –ø—Ä–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —É –Ω–∞—Å –Ω–µ–º–∞–ª–æ. –ò —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã –¥–æ —Ä–µ–º–æ–Ω—Ç–∞ —Ç—É—Ä–±–∏–Ω—ã - –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ñ–µ—Ä –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª—É–±–Ω—É—é —Å–∫–∏–¥–∫—É –¥–ª—è —Ç–∞–∫–∏—Ö —É–º–Ω–∏—á–µ–∫ –∏ –º–æ–ª–æ–¥—Ü–æ–≤üòÇüòÇ\n\n–£ —Ç–µ–±—è –Ω–µ—Ç –í–ê–ì–∞, –Ω–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ñ–∞–Ω–∞—Ç –Ω–µ–º–µ—Ü–∫–æ–≥–æ –∞–≤—Ç–æ–ø—Ä–æ–º–∞? –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –∏ –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—Éü•∞ –ú—ã –ª—é–±–∏–º –∏ —É–≤–∞–∂–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n–î—É–º–∞–µ–º, —á—Ç–æ —Å—Ç–∞–ª–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–Ω—è—Ç–Ω–µ–µ.\n–ü–æ—ç—Ç–æ–º—É —á–µ–≥–æ –∂–¥–∞—Ç—å - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞–º –≤ –∫–ª—É–±!!!üéâüéäüéâüéäüéâ`
					)
				)
			} else if (text === "–ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞") {
				return (
					bot.sendMessage(
						chatId,
						`–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ù–æ–≤–æ–º –ì–æ–¥—É!)`,
						menu
					)
				)
				// await bot.sendPhoto(chatId, './img/event.jpg');
				// await bot.sendLocation(chatId, 56.135323, 47.242850);
				// return (
				// 	bot.sendMessage(
				// 		chatId,
				// 		`–î–∞—Ç–∞: 25/12/2022\n–í—Ä–µ–º—è: 20:00\n–ú–µ—Å—Ç–æ: –¢–¶ –ö–∞—Ä—É—Å–µ–ª—å`,
				// 		menu
				// 	)
				// )
			} else if (text === "–ü–∞—Ä—Ç–Ω–µ—Ä—ã") {
				return (
					bot.sendMessage(
						chatId,
						`–í—ã–±–µ—Ä–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É üëá`,
						partners
					)
				)
			} else if (text === "–ù–∞—à–∏ –∞–≤—Ç–æ") {
				return (
					bot.sendMessage(
						chatId,
						`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üëá`,
						ourcars
					)
				)
			} else if (text === "–ü–æ–∏—Å–∫ –∞–≤—Ç–æ") {
				return (
					bot.sendMessage(
						chatId,
						`–ü–µ—Ä–µ–π–¥–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É üëá`,
						searchcar
					)
				)
			} else if (text === "–ü—Ä–æ—Ñ–∏–ª—å") {
				return (
					bot.sendMessage(
						chatId,
						`–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º?`,
						profile
					)
				)
			} else if (text === "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å") {
				try {
					let profile = await Users.findOne({ where: { chatId: chatId } });
					if (profile.carImage) {
						await bot.sendPhoto(chatId, path.resolve(__dirname, "..", "bot-back/img/users_cars", profile.carImage))
					}
					return (
						bot.sendMessage(
							chatId,
							`–í—ã: ${profile.userName}\n–í–∞—à–µ –∞–≤—Ç–æ: ${profile.carModel}\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${profile.carYear}\n–ù–æ–º–µ—Ä –∞–≤—Ç–æ: ${profile.carGRZ}\n${profile.carNote ? '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ' + profile.carNote : ''}`,
							profile
						)
					)
				} catch (error) {
					console.log(error);
				}
			} else if (text === "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å") {

				return bot.sendMessage(
					chatId,
					'–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:)'
				)
				// let profile = await Users.findOne({ where: { chatId: chatId } });
				// let curImage = profile.carImage

				// updateProfile(chatId, curImage);

				// return (
				// 	bot.sendMessage(
				// 		chatId,
				// 		'–ü–µ—Ä–µ–π–¥–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è  üëá',
				// 		changeProfile
				// 	)
				// )
			} else if (text === "–ú–µ–Ω—é") {
				return (
					bot.sendMessage(
						chatId,
						`–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
						menu
					)
				)
			} else if (text === "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±") {
				await bot.sendMessage(chatId, '–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:');
				await bot.sendMessage(chatId, '2202 2001 3923 4809');
				return bot.sendMessage(
					chatId,
					'–ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ:)'
				)
			}
		} catch (error) {
			return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞!', menu)
		}

		if (msg?.web_app_data?.data) {
			try {
				const data = await JSON.parse(msg?.web_app_data?.data)

				await Users.create({
					chatId: chatId,
					userName: data.name.trimEnd(),
					carModel: data.car.toLowerCase().trimEnd(),
					carYear: data.carYear.trimEnd(),
					carGRZ: data.carNum.trimEnd(),
					carNote: data.carNote.toLowerCase().trimEnd(),
					carImage: data.carImage
				})

				return (
					bot.sendMessage(
						chatId,
						`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${data.name.trimEnd()}!\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
						menu
					)
				)
			} catch (e) {
				console.log(e);
			}
		}
	})


}

start();